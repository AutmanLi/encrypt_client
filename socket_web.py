#!/usr/bin/env python
# encoding: utf-8

"""
@version: 1.0
@author: autmanli
@license: Apache Licence
@file: socket_web.py
@time: 2019/3/28 15:25
@description:本地加密客户端socket
"""

import socket
from Pyfhel import Pyfhel, PyCtxt, PyPtxt
import json
import base64, os
from Request import Request
import pickle
import threading
import time
from email.utils import formatdate
import sys
import urllib
from pysm4 import encrypt_ecb, decrypt_ecb


class pyfhelSocket(object):
    def __init__(self, ip='127.0.0.1', port=19327):
        self.ip = ip
        self.port = port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    def open(self):
        '''
        建立socket连接，监听指定端口
        :return:
        '''

        try:
            self.socket.bind((self.ip, self.port))
            self.socket.listen(5)
            print('encrypt service is running!We are listen to port', self.port)
            while True:
                sock, addr = self.socket.accept()
                t = threading.Thread(target=self.httplink, args=(sock, addr))
                t.start()
        except KeyboardInterrupt:
            print("服务器停止了服务")
            # sock.close()
        finally:
            self.__close__()

    def __close__(self):
        self.socket.close()

    def httplink(self, sock, addr):
        print('Accept new connection from %s:%s...' % addr)
        while True:

            data = sock.recv(10240)
            time.sleep(1)

            # responseHeader = self.getdefaultHeader()
            # sock.sendall(responseHeader)
            # 真实请求的数据，由于我们一次密文大约是4300字节
            # data=sock.recv(10240)
            # time.sleep(1)
            if data == b'' or not data:
                break
            print('Received http request:', data)
            requestData = data.decode('utf-8')
            request = Request(requestData)
            path, query = request.parse_path()

            # print(query)
            '''
            全同态公私钥和加密部分
            '''
            if not query:
                # 传输测试
                jsondata = [{
                    "ciperText": ""}]
                jsonstr = json.dumps(jsondata).encode('utf8')
                jsonstr_len = len(jsonstr)
                responseHeader = self.getdefaultHeader(jsonstr_len)

            if query['message'] == 'generateKey':
                self.generateKeyPair()
                jsondata = [{"result": "OK"}]
                jsonstr = json.dumps(jsondata).encode('utf8')
                jsonstr_len = len(jsonstr)
                responseHeader = self.getdefaultHeader(jsonstr_len)
            elif query['message'] == 'encryptInt':
                # try:
                ptxt = int(query['ptxt'])
                print(ptxt)
                ctxt = self.generate_ctxt(ptxt)
                jsondata = [{"ciperText": ctxt}]
                jsonstr = json.dumps(jsondata).encode('utf8')
                jsonstr_len = len(jsonstr)

                responseHeader = self.getdefaultHeader(jsonstr_len)


            elif query['message'] == 'decryptInt':
                # 接收post方法传过来的formdata
                ctxt_json = sock.recv(request.content_len).decode('utf-8')

                ctxt = ctxt_json[5:]
                print(ctxt)
                decrypt_txt = self.decrypt_ctxt(ctxt)
                jsondata = [{"ptxt": decrypt_txt}]
                jsonstr = json.dumps(jsondata).encode('utf8')
                jsonstr_len = len(jsonstr)
                responseHeader = self.getdefaultHeader(jsonstr_len)


            # HE-加密 本地加解密部分 生成公私钥
            elif query['message'] == 'HEkey':
                # key_json = sock.recv(request.content_len).decode('utf-8')
                key_json = request.body
                print('传输的数据：', key_json)

                publicKey = key_json[key_json.index('publicKey=') + 10:key_json.index('&')]
                publicKey = urllib.parse.unquote(publicKey)
                privateKey = key_json[key_json.index('privateKey=') + 11:]
                privateKey = urllib.parse.unquote(privateKey)
                print('publickey:', publicKey)
                print('privateKey:', privateKey)
                with open('key/publickey-HE.pem', 'w') as f:
                    f.write(publicKey)
                with open('key/privatekey-HE.pem', 'w') as f:
                    f.write(privateKey)
                jsondata = [{"result": "OK"}]
                jsonstr = json.dumps(jsondata).encode('utf8')
                jsonstr_len = len(jsonstr)
                responseHeader = self.getdefaultHeader(jsonstr_len)

            # sm4 加密,解密文本
            elif query['message'] == 'encryptText':
                key_json = request.body
                print('传输的文本：', key_json)

                key = 'asd34%sadzf'

                text_unencrypt = key_json[key_json.index('text=') + 5:]
                text_unencrypt = urllib.parse.unquote(text_unencrypt)

                print('text_decrypt:', text_unencrypt)
                text_encrypt = encrypt_ecb(text_unencrypt, key)
                print('text_encrypt:', text_encrypt)
                jsondata = [{"result": text_encrypt}]
                jsonstr = json.dumps(jsondata).encode('utf8')
                jsonstr_len = len(jsonstr)
                responseHeader = self.getdefaultHeader(jsonstr_len)

            elif query['message'] == 'decryptText':
                key_json = request.body
                print('传输的文本：', key_json)
                key = 'asd34%sadzf'

                text_encrypt = key_json[key_json.index('cText=') + 6:]
                text_encrypt = urllib.parse.unquote(text_encrypt)

                print('text_encrypt:', text_encrypt)
                text_decrypt = decrypt_ecb(text_encrypt, key)
                print('text_decrypt:', text_decrypt)
                jsondata = [{"result": text_decrypt}]
                jsonstr = json.dumps(jsondata).encode('utf8')
                jsonstr_len = len(jsonstr)
                responseHeader = self.getdefaultHeader(jsonstr_len)

            sock.sendall(responseHeader)
            sock.sendall(jsonstr)

            # sock.close()

    @staticmethod
    def generateKeyPair():
        '''
        生成公私钥对
        :return:
        '''
        print('生成公私钥对')
        try:
            HE = Pyfhel()
            HE.contextGen(p=65537)
            HE.keyGen()
            HE.saveContext("key/context.pycon")
            HE.savepublicKey("key/public_k.pypk")
            HE.savesecretKey("key/secret_k.pysk")

        except:
            raise EOFError

    def getdefaultHeader(self, content_len=0):
        '''
        在该方法内直接写死，提高代码的复用，减少代码行数
        :return:
        '''
        responseHeader = 'HTTP/1.1 200 OK\r\n'
        responseHeader = self.SetHeader(responseHeader, 'Date',
                                        formatdate(timeval=None, localtime=False, usegmt=True))
        responseHeader = self.SetHeader(responseHeader, 'Connection', 'close')
        responseHeader = self.SetHeader(responseHeader, 'Server', 'socket (Custom)')
        responseHeader = self.SetHeader(responseHeader, 'Content-Type', 'application/json')
        responseHeader = self.SetHeader(responseHeader, 'Access-Control-Allow-Origin', '*')
        responseHeader = self.SetHeader(responseHeader, 'Access-Control-Allow-Methods', 'GET')
        responseHeader = self.SetHeader(responseHeader, 'Access-Control-Allow-Headers', 'Content-Type')
        responseHeader = self.SetHeader(responseHeader, 'Content-length', str(content_len))
        responseHeader = self.SetHeader(responseHeader, 'Last-Modified',
                                        formatdate(timeval=None, localtime=False, usegmt=True))
        # responseHeader = self.SetHeader(responseHeader, 'Transfer-Encoding', 'chunked')
        responseHeader = self.EndHeader(responseHeader)
        return responseHeader

    @staticmethod
    def SetHeader(header, key, val):
        return header + key + ' : ' + val + '\r\n'

    @staticmethod
    def EndHeader(header):
        return bytes(header + '\r\n', 'utf-8')

    @staticmethod
    def generate_ctxt(int_a):
        '''
        加密数字a
        :param int_a: 需要加密的数字a
        :return:
        '''
        HE = Pyfhel()
        HE.restoreContext("key/context.pycon")
        HE.restorepublicKey("key/public_k.pypk")
        ctxtx = HE.encryptInt(int_a)
        ctxtx.save("ciper/ctxt.c1")
        with open("ciper/ctxt.c1", "rb") as con_f:
            a = con_f.read() + b"="
            context_b64e = str(base64.b64encode(a), "utf-8")
        # print(context_b64e)
        return context_b64e
        # return ''

    @staticmethod
    def decrypt_ctxt(ctxt_a):
        '''
        解密数字a
        :param ctxt_a: 需要解密的密文a
        :return:
        '''
        HE = Pyfhel()
        # ctxt_a = base64.b64decode(bytes(ctxt_a, "utf-8"))
        # with open("ciper/txt_rest.c1", "wb") as t1_f:
        #     t1_f.write(ctxt_a)
        tmp = PyCtxt()
        tmp.load("ciper/ctxt.c1")
        HE.restoreContext("key/context.pycon")
        HE.restoresecretKey("key/secret_k.pysk")
        ctxtx = HE.decryptInt(tmp)
        print(ctxtx)
        return ctxtx


if __name__ == '__main__':
    sock = pyfhelSocket('202.114.40.141')
    sock.open()
